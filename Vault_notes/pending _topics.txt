pending topics are:

1.elastic search
2.vault

once load balancer completes need to complete the above two

****************************************************************************************************************
what if VM goes down? single server for each component or if VM goes down what is the availability of application(load balancer will sove this problem)
* to run frontend application outside of the server , we need to go "loadbalancer"
loaadbalancer will do a reverse proxy url

1.launch  two instances
install nginx in both instances then start nginx
2.cd /usr/share/nginx/html/
3. ls
4. vim index.html---change name as server1 and server2 in both instances

three types of loadbalancers are there:
1.Application load balancer
2.network load balancer
3.Gateway load balancer
4. classic load balancer: to deal with http,https,tcp,ssl(for existing application in ec2 server)
*********************
create a group of servers for which we have to send traffic
-----------------------------------------------------------
1. go to the target group
2. click on create target group
3. target group support instances,support ip addresses,application load balancer
4. select instances
5. insert name for target group name
6.default vpc
7.http port:80
8.click on next
9. choose list of available instances(select on newly created instances)
10.click on include pending below: two instances were added--->click on the button
11.not assocaite to any load balancer
12.click on load balancer
13.select application load balancer
14. load balancer name:test , internal or internal-facing means no public
15. click on all availability zones
16.select security groups as allow-all/allow
17.In listeners and routing-->choose  default action as instance(test)
18. click on create load balancer
19. once provisioner is "active" take dns name and paste on to the browser
20. if load balancer is a private lod balancer , how to expose outside
21. under load balancer
22. click on listeners and rulers
23. delete default listener which is the port 80
24. create another load balancer
25: name as "private"
26: click on internal
27: click on all available subnets
28: select security group as "allow-all"
29 send traffic to test(default actio)
30:click on "create load balancer"
31: create a target group
32: select ip address
33:target group name: ip-test
34:choose next
35: paste ip address in (Enter an ipv4 ip address)
36: enter port number depends on tool(like vault,elk,....)
37: click on create a target group
38: test load balancer---> add a listener
39: routing actions: forward to target groups
40: click add
41: to convert traffic https to http or viceversa
backend server is listening on https
http-->https so may be ambiguity problem(wrong)
to convert traffic from https to http
frontend is https and backend is http its easy to convert traffic
https of loadbalancer can send traffic to backend

42: delete ip address listners because load balancer of http cannot send traffic to http so remove that listener




create a target group
select ip addresses
target group name is : ip-test----> choose next
enter ip address (gocdserver)
port no"8153(gocd-server)


create load balancer:
=====================

for test public target group----add listener

select routing actions as Forward...
target-group ---ip-test----click on button

loadbalancer is http
backend server https
so unable to convert http to https   http--->https --BAD
able to convert https to http    https---->http ---OK
https to https is also possible https --->https --OK

1.first to create target group
2.create load balancer with interna; facing(public) and port is 80 and send traffic test
3.create load balancer with internal(private) and send traffic
4.create a target group with ip address and select one server address(like https vault)
5.for existing target group add listener and select routing action as "forward" and click on button



Initial root token
hvs.n0sFn9ooJ00hpmR4ptwIuKpJ


Key 1
q97nhwcQiexz9P6ZjyQ8Ko065xXW0a5xNjeHQp7SES0=


1. create instance in targetgroup
create loadbalancer with internal-facing(public)

2. create targetgroup with ip addresses
create loadbalancer with internal


lb_type="public
lb_needed=true
for frontend
lb_type="private
lb_needed=true
for backend
lb_needed = false
for mysql
=================================================================
Health checks
1.The associated load balancer periodically sends requests, per the settings below,
to the registered targets to test their status.
Register targets
2.This is an optional step to create a target group. However,
to ensure that your load balancer routes traffic to this target group you must register your targets.
Application LB:
Choose an Application Load Balancer when you need a flexible feature set for your applications with HTTP and HTTPS traffic. Operating at the request level, Application Load Balancers provide advanced routing and visibility features targeted at application architectures, including microservices and containers.
Create Application Load Balancer Info
The Application Load Balancer distributes incoming HTTP and HTTPS traffic across multiple targets such as Amazon EC2 instances, microservices, and containers, based on request attributes. When the load balancer receives a connection request, it evaluates the listener rules in priority order to determine which rule to apply, and if applicable, it selects a target from the target group for the rule action.Create Application Load Balancer Info

Listeners and routing Info
A listener is a process that checks for connection requests using the port and protocol you configure. The rules that you define for a listener determine how the load balancer routes requests to its registered targets.



curl -v localhost:800/health

techvidya india  ----- aws,docker , Kubernetes,jenkins

Rajesh DevOps

frontend --public subnets outside world(DNS records)
backend --- private subnets(internal dns records)
first add all the server ip address to security group
then which server needs to access load balancer for that we can create
another security group with the name as load balancer.
***************************************************************************************************************
how to access the application outside?
======================================
Step1: here target group is an instance
========================================
By using load balancer we can access the application outside,here loadbalancer is a device
1.first connect this loadbalancer from public subnets to frontend subnets
pass this public subnets through modules and can access in an app modules
add these public subnets in load balancer.
add port and protocol to security group who will access the load balancer
2.so frontend having public subnets , through this public subnets can able to access outside.
3.create a target group
4.attach this target group
5.create load balancer
6.create a listener and forward target group to load balancer
7.add server ip address to security group
8.add one more security group for load balancer which ip server can able to access outside


